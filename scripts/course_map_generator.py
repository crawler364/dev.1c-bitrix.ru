#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç—ã –∫—É—Ä—Å–æ–≤ –¥–ª—è Bitrix Framework
–°–æ–∑–¥–∞–µ—Ç MD —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–æ–π –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data
"""

import os
import json
import re
from datetime import datetime
from pathlib import Path


def extract_metadata_from_md(md_file_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ MD —Ñ–∞–π–ª–∞ –∫—É—Ä—Å–∞
    
    Args:
        md_file_path: –ü—É—Ç—å –∫ MD —Ñ–∞–π–ª—É
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (url, views, last_modified)
    """
    metadata = {}
    
    try:
        with open(md_file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        url_match = re.search(r'- \*\*URL:\*\* (.+)', content)
        if url_match:
            metadata['url'] = url_match.group(1)
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        date_match = re.search(r'–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: (\d{2}\.\d{2}\.\d{4})', content)
        if date_match:
            metadata['last_modified'] = date_match.group(1)
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        views_match = re.search(r'–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ([\d\s]+)', content)
        if views_match:
            views_str = views_match.group(1).replace(' ', '')
            metadata['views'] = int(views_str) if views_str.isdigit() else 0
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã (–∑–∞–≥–æ–ª–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è 5)
        sections = re.findall(r'^##### (.+)$', content, re.MULTILINE)
        if sections:
            metadata['sections'] = sections[:8]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 8 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ MD —Ñ–∞–π–ª–∞ {md_file_path}: {e}")
        
    return metadata


def extract_title_from_md(md_file_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞ –∏–∑ MD —Ñ–∞–π–ª–∞
    –ò—â–µ—Ç –ø–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è (###) –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ"
    
    Args:
        md_file_path: –ü—É—Ç—å –∫ MD —Ñ–∞–π–ª—É
        
    Returns:
        str: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞ –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        with open(md_file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª "## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ"
        content_section_match = re.search(r'## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ\s*\n(.*?)(?=\n## |$)', content, re.DOTALL)
        if content_section_match:
            content_section = content_section_match.group(1)
            
            # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤ —Ä–∞–∑–¥–µ–ª–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            title_match = re.search(r'^### (.+)$', content_section, re.MULTILINE)
            if title_match:
                return title_match.group(1).strip()
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∏—â–µ–º –ª—é–±–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è
        title_match = re.search(r'^### (.+)$', content, re.MULTILINE)
        if title_match:
            return title_match.group(1).strip()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ {md_file_path}: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫–∞–∫ fallback
    filename = os.path.basename(md_file_path)
    return filename.replace('.md', '')


def extract_course_id_from_path(course_dir):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∫—É—Ä—Å–∞ –∏–∑ –ø—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    Args:
        course_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "course_43")
        
    Returns:
        str: ID –∫—É—Ä—Å–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
    """
    match = re.search(r'course_(\d+)', os.path.basename(course_dir))
    return match.group(1) if match else None


def scan_courses_directory(data_dir):
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∫—É—Ä—Å–∞—Ö
    
    Args:
        data_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—Å–∞—Ö
    """
    courses = []
    
    if not os.path.exists(data_dir):
        print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {data_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return courses
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ data
    for item in os.listdir(data_dir):
        course_path = os.path.join(data_dir, item)
        
        if os.path.isdir(course_path) and item.startswith('course_'):
            course_info = process_course_directory(course_path, item)
            if course_info:
                courses.append(course_info)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –ø–æ ID
    courses.sort(key=lambda x: int(x.get('course_id', '0')))
    
    return courses


def process_course_directory(course_path, course_dirname):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å–∞
    
    Args:
        course_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—É—Ä—Å–∞
        course_dirname: –ò–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—É—Ä—Å–∞
        
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ
    """
    course_info = {
        'course_id': extract_course_id_from_path(course_dirname),
        'directory': course_dirname,
        'path': course_path
    }
    
    # –ò—â–µ–º course_info.json
    course_info_path = os.path.join(course_path, 'course_info.json')
    if os.path.exists(course_info_path):
        try:
            with open(course_info_path, 'r', encoding='utf-8') as f:
                json_data = json.load(f)
                course_info['title'] = json_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                course_info['description'] = json_data.get('description', '')
                course_info['lessons_count'] = len(json_data.get('lessons', []))
                course_info['lessons'] = json_data.get('lessons', [])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ course_info.json –≤ {course_path}: {e}")
            return None
    else:
        print(f"–§–∞–π–ª course_info.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {course_path}")
        return None
    
    # –ò—â–µ–º –≥–ª–∞–≤–Ω—ã–π MD —Ñ–∞–π–ª –∫—É—Ä—Å–∞
    main_md_file = None
    for file in os.listdir(course_path):
        if file.endswith('.md') and not ('lesson' in file.lower() or '—É—Ä–æ–∫' in file.lower() or '–≥–ª–∞–≤–∞' in file.lower()):
            main_md_file = os.path.join(course_path, file)
            break
    
    if main_md_file:
        metadata = extract_metadata_from_md(main_md_file)
        course_info.update(metadata)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ MD —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    md_files = [f for f in os.listdir(course_path) if f.endswith('.md')]
    course_info['md_files_count'] = len(md_files)
    
    return course_info


def generate_course_map(courses, output_file):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∫–∞—Ä—Ç—ã –∫—É—Ä—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
    –°–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±–ª–æ–∫ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –æ—Ñ–ª–∞–π–Ω —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ data
    
    Args:
        courses: –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤
        output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    content = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    content.append("# –ö–∞—Ä—Ç–∞ –∫—É—Ä—Å–æ–≤ Bitrix Framework")
    content.append("")
    content.append("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Ñ–ª–∞–π–Ω —Ñ–∞–π–ª—ã –∫—É—Ä—Å–æ–≤.")
    content.append(f"**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    content.append("")
    
    # –ë–ª–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã
    content.append("## üìÇ –°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –∫—É—Ä—Å–æ–≤")
    content.append("")
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ MD —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏
    for course in courses:
        course_directory = course.get('directory', '')
        course_path = course.get('path', '')
        
        if not course_path or not os.path.exists(course_path):
            continue
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ MD —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—É—Ä—Å–∞
        try:
            md_files = [f for f in os.listdir(course_path) if f.endswith('.md')]
            md_files.sort()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            
            if md_files:
                course_title = course.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                content.append(f"### {course_title}")
                content.append("")
                
                for md_file in md_files:
                    # –°–æ–∑–¥–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
                    relative_path = f"data/{course_directory}/{md_file}"
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ MD —Ñ–∞–π–ª–∞
                    md_file_path = os.path.join(course_path, md_file)
                    link_text = extract_title_from_md(md_file_path)
                    content.append(f"- [{link_text}]({relative_path})")
                
                content.append("")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—É—Ä—Å–∞ {course_directory}: {e}")
            continue
    
    # Footer
    content.append("---")
    content.append("")
    content.append("*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä—Å–µ—Ä–æ–º –∫—É—Ä—Å–æ–≤ Bitrix Framework*")
    content.append(f"*–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}*")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(content))
        print(f"‚úÖ –ö–∞—Ä—Ç–∞ –∫—É—Ä—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {output_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –∫—É—Ä—Å–æ–≤: {e}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–∞—Ä—Ç—ã –∫—É—Ä—Å–æ–≤
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    current_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    data_dir = os.path.join(current_dir, 'data')
    output_file = os.path.join(current_dir, 'COURSES_MAP.md')
    
    print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—É—Ä—Å–æ–≤...")
    courses = scan_courses_directory(data_dir)
    
    if not courses:
        print("‚ö†Ô∏è  –ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data")
        return
    
    print(f"üìö –ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {len(courses)}")
    
    print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –∫—É—Ä—Å–æ–≤...")
    generate_course_map(courses, output_file)
    
    print("‚úÖ –ì–æ—Ç–æ–≤–æ!")


if __name__ == "__main__":
    main()
